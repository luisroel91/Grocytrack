{"version":3,"file":"easy-peasy.umd.js","sources":["../node_modules/shallowequal/index.js","../src/context.js","../src/lib.js","../src/hooks.js","../src/constants.js","../src/helpers.js","../src/create-store-internals.js","../src/create-store.js","../src/index.js","../src/provider.js","../src/create-component-store.js","../src/create-context-store.js"],"sourcesContent":["//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A's keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { createContext } from 'react';\n\nconst StoreContext = createContext();\n\nexport default StoreContext;\n","export const isStateObject = x =>\n  x !== null && typeof x === 'object' && !Array.isArray(x);\n\nexport const get = (path, target) =>\n  path.reduce(\n    (acc, cur) => (isStateObject(acc) ? acc[cur] : undefined),\n    target,\n  );\n\nexport const set = (path, target, value) => {\n  path.reduce((acc, cur, idx) => {\n    if (idx + 1 === path.length) {\n      acc[cur] = value;\n    } else {\n      acc[cur] = acc[cur] || {};\n    }\n    return acc[cur];\n  }, target);\n};\n","import { useState, useEffect, useContext, useRef } from 'react';\nimport shallowEqual from 'shallowequal';\nimport EasyPeasyContext from './context';\nimport { isStateObject } from './lib';\n\nexport function createStoreStateHook(Context) {\n  return function useStoreState(mapState, dependencies = []) {\n    const store = useContext(Context);\n    const [state, setState] = useState(() => mapState(store.getState()));\n    const [error, setError] = useState(null);\n    // As our effect only fires on mount and unmount it won't have the state\n    // changes visible to it, therefore we use a mutable ref to track this.\n    const stateRef = useRef(state);\n    // Helps avoid firing of events when unsubscribed, i.e. unmounted\n    const isActive = useRef(true);\n    // Tracks when a hooked component is unmounting\n    const unmounted = useRef(false);\n    // Throwing the error inline allows error boundaries the opportunity to\n    // catch the error\n    if (error) {\n      throw error;\n    }\n    useEffect(() => {\n      isActive.current = true;\n      const calculateState = () => {\n        if (!isActive.current) {\n          return;\n        }\n        try {\n          const newState = mapState(store.getState());\n          if (\n            newState === stateRef.current ||\n            (isStateObject(newState) &&\n              isStateObject(stateRef.current) &&\n              shallowEqual(newState, stateRef.current))\n          ) {\n            // Do nothing\n            return;\n          }\n          stateRef.current = newState;\n          setState(() => stateRef.current);\n        } catch (err) {\n          // see https://github.com/reduxjs/react-redux/issues/1179\n          // There is a possibility mapState will fail as the props/state that\n          // the component has received is stale. Therefore we will afford the\n          // application a small window of opportunity, where if they unmount\n          // the component or provide it with new \"valid\" props (which will\n          // subsequently cause a refreshed subscription cycle) then we will not\n          // throw an error.\n          // This is by no means a robust solution. We should track the\n          // associated issue in the hope for a more dependable solution.\n\n          // Setting the listener as \"inactive\", this can only be changed if the\n          // incoming dependencies are different (i.e. props have changed)\n          isActive.current = false;\n\n          setTimeout(() => {\n            if (!unmounted.current && !isActive.current) {\n              setError(err);\n            }\n          }, 200); // give a window of opportunity\n        }\n      };\n      calculateState();\n      const unsubscribe = store.subscribe(calculateState);\n      return () => {\n        isActive.current = false;\n        unsubscribe();\n      };\n    }, dependencies);\n\n    // This effect will set the ref value to indicate that the component has\n    // unmounted\n    useEffect(() => {\n      return () => {\n        unmounted.current = true;\n      };\n    }, []);\n    return state;\n  };\n}\n\nexport const useStoreState = createStoreStateHook(EasyPeasyContext);\n\nexport function createStoreActionsHook(Context) {\n  return function useStoreActions(mapActions) {\n    const store = useContext(Context);\n    return mapActions(store.dispatch);\n  };\n}\n\nexport const useStoreActions = createStoreActionsHook(EasyPeasyContext);\n\nexport function createStoreDispatchHook(Context) {\n  return function useStoreDispatch() {\n    const store = useContext(Context);\n    return store.dispatch;\n  };\n}\n\nexport const useStoreDispatch = createStoreDispatchHook(EasyPeasyContext);\n\nconst wrapWithWarning = (prev, next, useImp) => {\n  let warned = false;\n  return function useDeprecated(...args) {\n    if (process.env.NODE_ENV !== 'production' && !warned) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `easy-peasy: The \"${prev}\" hook has been deprecated. Please replace all instances with the \"${next}\" hook.`,\n      );\n      warned = true;\n    }\n    return useImp(...args);\n  };\n};\n\nexport const useActions = wrapWithWarning(\n  'useActions',\n  'useStoreActions',\n  useStoreActions,\n);\n\nexport const useDispatch = wrapWithWarning(\n  'useDispatch',\n  'useStoreDispatch',\n  useStoreDispatch,\n);\n\nexport const useStore = wrapWithWarning(\n  'useStore',\n  'useStoreState',\n  useStoreState,\n);\n\nexport function createTypedHooks() {\n  return {\n    useActions,\n    useDispatch,\n    useStore,\n    useStoreActions,\n    useStoreDispatch,\n    useStoreState,\n  };\n}\n","export const actionNameSymbol = 'ðŸ™ˆactionNameðŸ™ˆ';\nexport const actionSymbol = 'ðŸ™ˆactionðŸ™ˆ';\nexport const actionStateSymbol = 'ðŸ™ˆactionStateðŸ™ˆ';\n\nexport const computedSymbol = 'ðŸ™ˆcomputedSymbolðŸ™ˆ';\nexport const computedConfigSymbol = 'ðŸ™ˆcomputedConfigSymbolðŸ™ˆ';\n\nexport const listenSymbol = 'ðŸ™ˆlistenðŸ™ˆ';\n\nexport const metaSymbol = 'ðŸ™ˆmetaðŸ™ˆ';\n\nexport const reducerSymbol = 'ðŸ™ˆreducerðŸ™ˆ';\n\nexport const selectDependenciesSymbol = 'ðŸ™ˆselectDependenciesðŸ™ˆ';\nexport const selectImpSymbol = 'ðŸ™ˆselectImpðŸ™ˆ';\nexport const selectStateSymbol = 'ðŸ™ˆselectStateðŸ™ˆ';\nexport const selectSymbol = 'ðŸ™ˆselectðŸ™ˆ';\n\nexport const selectorSymbol = 'ðŸ™ˆselectorðŸ™ˆ';\nexport const selectorConfigSymbol = 'ðŸ™ˆselectorConfigðŸ™ˆ';\nexport const selectorStateSymbol = 'ðŸ™ˆselectorStateðŸ™ˆ';\n\nexport const thunkSymbol = 'ðŸ™ˆthunkðŸ™ˆ';\nexport const thunkStateSymbol = 'ðŸ™ˆthunkStateðŸ™ˆ';\n","import { isDraft, finishDraft, createDraft } from 'immer-peasy';\nimport memoizerific from 'memoizerific';\nimport {\n  actionNameSymbol,\n  actionStateSymbol,\n  actionSymbol,\n  computedSymbol,\n  computedConfigSymbol,\n  listenSymbol,\n  reducerSymbol,\n  selectDependenciesSymbol,\n  selectorConfigSymbol,\n  selectorSymbol,\n  selectStateSymbol,\n  selectSymbol,\n  thunkStateSymbol,\n  thunkSymbol,\n} from './constants';\n\nexport const actionName = action => action[actionNameSymbol];\n\nexport const debug = state => {\n  if (isDraft(state)) {\n    const final = finishDraft(createDraft(state));\n    return final;\n  }\n  return state;\n};\n\nexport const thunkStartName = action => `${action[actionNameSymbol]}(started)`;\n\nexport const thunkCompleteName = action =>\n  `${action[actionNameSymbol]}(completed)`;\n\nexport const thunkFailName = action => `${action[actionNameSymbol]}(failed)`;\n\nexport const action = (fn, config) => {\n  fn[actionSymbol] = true;\n  fn[actionStateSymbol] = {\n    config,\n  };\n  return fn;\n};\n\nconst defaultStateResolvers = [state => state];\n\nexport const computed = (fn, stateResolvers = defaultStateResolvers) => {\n  fn[computedSymbol] = true;\n  fn[computedConfigSymbol] = {\n    stateResolvers,\n  };\n  return fn;\n};\n\nexport const listen = fn => {\n  fn[listenSymbol] = true;\n  return fn;\n};\n\nexport const memo = (fn, cacheSize) => memoizerific(cacheSize)(fn);\n\nexport const thunk = (fn, config) => {\n  fn[thunkSymbol] = true;\n  fn[thunkStateSymbol] = {\n    config,\n  };\n  return fn;\n};\n\nexport const select = (fn, dependencies) => {\n  fn[selectSymbol] = true;\n  fn[selectDependenciesSymbol] = dependencies;\n  fn[selectStateSymbol] = {};\n  return fn;\n};\n\nexport const selector = (args, fn, config) => {\n  fn[selectorSymbol] = true;\n  fn[selectorConfigSymbol] = {\n    args,\n    config,\n  };\n  return fn;\n};\n\nexport const reducer = fn => {\n  fn[reducerSymbol] = true;\n  return fn;\n};\n","import memoizerific from 'memoizerific';\nimport produce from 'immer-peasy';\nimport {\n  actionNameSymbol,\n  actionStateSymbol,\n  actionSymbol,\n  computedSymbol,\n  computedConfigSymbol,\n  listenSymbol,\n  metaSymbol,\n  reducerSymbol,\n  selectDependenciesSymbol,\n  selectImpSymbol,\n  selectorConfigSymbol,\n  selectorStateSymbol,\n  selectorSymbol,\n  selectStateSymbol,\n  selectSymbol,\n  thunkStateSymbol,\n  thunkSymbol,\n} from './constants';\nimport { isStateObject, get, set } from './lib';\nimport * as helpers from './helpers';\n\nconst maxSelectFnMemoize = 100;\nconst tick = () => new Promise(resolve => setTimeout(resolve));\n\nconst errorToPayload = err => {\n  if (err instanceof Error) {\n    return {\n      message: err.message,\n      stack: err.stack,\n    };\n  }\n  if (typeof err === 'string') {\n    return err;\n  }\n  return undefined;\n};\n\nexport default function createStoreInternals({\n  disableInternalSelectFnMemoize,\n  initialState,\n  injections,\n  model,\n  reducerEnhancer,\n  references,\n}) {\n  let isInReducer = false;\n\n  const wrapFnWithMemoize = x =>\n    !disableInternalSelectFnMemoize && typeof x === 'function'\n      ? memoizerific(maxSelectFnMemoize)(x)\n      : x;\n\n  const defaultState = initialState || {};\n  let selectorId = 0;\n\n  const computedProperties = {};\n\n  const actionCreatorDict = {};\n  const actionCreators = {};\n\n  const actionListenersDict = {};\n\n  const actionReducersDict = {};\n  const actionReducersForPath = {};\n\n  const actionThunks = {};\n\n  const customReducers = [];\n\n  const listenDefinitions = [];\n\n  const listenerActionDefinitions = [];\n  const listenerActionMap = {};\n  const listenerThunkMap = {};\n\n  const selectorsDict = {};\n  const selectorReducers = [];\n\n  const thunkListenersDict = {};\n\n  const recursiveExtractDefsFromModel = (current, parentPath) =>\n    Object.keys(current).forEach(key => {\n      const value = current[key];\n      const path = [...parentPath, key];\n      const meta = {\n        parent: parentPath,\n        path,\n      };\n      if (typeof value === 'function') {\n        if (value[actionSymbol]) {\n          const name = `@action.${path.join('.')}`;\n          value[actionNameSymbol] = name;\n          value[metaSymbol] = meta;\n\n          // Action Reducer\n          const actionReducer = value;\n          actionReducer[actionNameSymbol] = name;\n          actionReducersDict[name] = actionReducer;\n          actionReducersForPath[parentPath] = actionReducer;\n\n          // Action Creator\n          const actionCreator = payload => {\n            const result = references.dispatch({\n              type: actionReducer[actionNameSymbol],\n              payload,\n            });\n            return result;\n          };\n          actionCreator[actionNameSymbol] = name;\n          actionCreatorDict[name] = actionCreator;\n          set(path, actionCreators, actionCreator);\n\n          const { config } = value[actionStateSymbol];\n          if (config && config.listenTo) {\n            listenerActionDefinitions.push(value);\n          }\n        } else if (value[thunkSymbol]) {\n          const name = `@thunk.${path.join('.')}`;\n          value[actionNameSymbol] = name;\n\n          // Thunk Action\n          const action = payload => {\n            return value(get(parentPath, actionCreators), payload, {\n              // @deprecated\n              dispatch: references.dispatch,\n              getState: () => get(parentPath, references.getState()),\n              getStoreActions: () => actionCreators,\n              getStoreState: references.getState,\n              injections,\n              meta,\n            });\n          };\n          set(path, actionThunks, action);\n\n          // Thunk Action Creator\n          const actionCreator = payload =>\n            tick()\n              .then(() =>\n                references.dispatch({\n                  type: `${name}(started)`,\n                  payload,\n                }),\n              )\n              .then(() => references.dispatch(() => action(payload)))\n              .then(result => {\n                references.dispatch({\n                  type: `${name}(completed)`,\n                  payload,\n                });\n                return result;\n              })\n              .catch(err => {\n                references.dispatch({\n                  type: `${name}(failed)`,\n                  payload,\n                  error: errorToPayload(err),\n                });\n                throw err;\n              });\n\n          actionCreator[actionNameSymbol] = name;\n          actionCreatorDict[name] = actionCreator;\n          set(path, actionCreators, actionCreator);\n\n          const { config } = value[thunkStateSymbol];\n          if (config && config.listenTo) {\n            listenerActionDefinitions.push(value);\n          }\n        } else if (value[computedSymbol]) {\n          let target = get(parentPath, defaultState);\n          if (!target) {\n            target = {};\n            set(parentPath, defaultState, target);\n          }\n          const config = value[computedConfigSymbol];\n          const { stateResolvers } = config;\n          const memoisedResultFn = memoizerific(1)(value);\n          let cache;\n          const createComputedProperty = o => {\n            Object.defineProperty(o, key, {\n              configurable: true,\n              get: () => {\n                const storeState = isInReducer\n                  ? references.currentState\n                  : references.getState();\n                const state = get(parentPath, storeState);\n                const inputs = stateResolvers.map(resolver =>\n                  resolver(state, storeState),\n                );\n                cache = memoisedResultFn(...inputs);\n                return cache;\n              },\n              set: () => {\n                throw new Error(\n                  `Easy Peasy: You attempted to set \"${path.join(\n                    '.',\n                  )}\", which is a computed property set a computed property`,\n                );\n              },\n            });\n          };\n          createComputedProperty(target);\n          set(path, computedProperties, createComputedProperty);\n        } else if (value[selectorSymbol]) {\n          selectorId += 1;\n          const selectorInstanceId = selectorId;\n          const { args, config } = value[selectorConfigSymbol];\n          const stateSelectors =\n            args && Array.isArray(args)\n              ? args.map(s => memoizerific(1)(s))\n              : [state => state];\n          const limit =\n            typeof config === 'object' &&\n            typeof config.limit === 'number' &&\n            config.limit > 0\n              ? config.number\n              : 1;\n          const internalSelector = memoizerific(limit)((...a) =>\n            value(\n              a.slice(0, stateSelectors.length),\n              a.slice(stateSelectors.length),\n            ),\n          );\n          let changeIdx = 0;\n\n          /**\n           * This allows us to track whether the state we are depending on\n           * (resolved via the state selectors), has changed. If so then we know\n           * that we should create a new instance of our selector function so\n           * that updates are propagated and memoization caches are cleared.\n           */\n          const createDependentStateChangeTracker = () => {\n            const internalChecker = memoizerific(1)(() => {\n              changeIdx += 1;\n              return changeIdx;\n            });\n            const dependentStateChangeTracker = storeState => {\n              const localState = get(parentPath, storeState);\n              const resolvedStateArgs = stateSelectors.reduce(\n                (acc, argSelector) => {\n                  acc.push(argSelector(localState, storeState));\n                  return acc;\n                },\n                [],\n              );\n              return internalChecker(...resolvedStateArgs);\n            };\n            return dependentStateChangeTracker;\n          };\n\n          /**\n           * We create a function allowing us to create new selector instances.\n           * We will need this ability to reinitialise a selector of the state\n           * it depends on changes.\n           */\n          const createSelector = () => {\n            const selector = (...runtimeArgs) => {\n              const storeState = references.getState();\n              const localState = get(parentPath, storeState);\n              const selectedStateArgs = stateSelectors.reduce(\n                (acc, argSelector) => [\n                  ...acc,\n                  argSelector(localState, storeState),\n                ],\n                [],\n              );\n              return internalSelector(...selectedStateArgs.concat(runtimeArgs));\n            };\n            selector[selectorStateSymbol] = {\n              dependentStateChangeTracker: createDependentStateChangeTracker(),\n              createSelector,\n              meta,\n              selectorId: selectorInstanceId,\n            };\n            return selector;\n          };\n          const selector = createSelector();\n          selectorsDict[selectorId] = selector;\n          set(path, defaultState, selector);\n        } else if (value[selectSymbol]) {\n          value[selectStateSymbol] = { parentPath, key, executed: false };\n          selectorReducers.push(value);\n        } else if (value[reducerSymbol]) {\n          customReducers.push({ path, reducer: value });\n        } else if (value[listenSymbol]) {\n          listenDefinitions.push(value);\n          value[metaSymbol] = meta;\n        } else if (process.env.NODE_ENV !== 'production') {\n          // eslint-disable-next-line no-console\n          console.warn(\n            `easy-peasy: Found a function at path ${path.join(\n              '.',\n            )} in your model. Version 2 required that you wrap your action functions with the \"action\" helper`,\n          );\n        }\n      } else if (isStateObject(value) && Object.keys(value).length > 0) {\n        const existing = get(path, defaultState);\n        if (existing == null) {\n          set(path, defaultState, {});\n        }\n        recursiveExtractDefsFromModel(value, path);\n      } else {\n        // State\n        const initialParentRef = get(parentPath, initialState);\n        if (initialParentRef && key in initialParentRef) {\n          set(path, defaultState, initialParentRef[key]);\n        } else {\n          set(path, defaultState, value);\n        }\n      }\n    });\n\n  recursiveExtractDefsFromModel(model, []);\n\n  listenerActionDefinitions.forEach(listenerAction => {\n    const {\n      config: { listenTo },\n    } = listenerAction[actionStateSymbol] || listenerAction[thunkStateSymbol];\n    let targetName;\n\n    const processListenTo = target => {\n      if (\n        typeof target === 'function' &&\n        target[actionNameSymbol] &&\n        actionCreatorDict[target[actionNameSymbol]]\n      ) {\n        if (target[thunkSymbol]) {\n          targetName = helpers.thunkCompleteName(target);\n        } else {\n          targetName = target[actionNameSymbol];\n        }\n      } else if (typeof target === 'string') {\n        targetName = target;\n      }\n      const listenerReg = listenerActionMap[targetName] || [];\n      listenerReg.push(actionCreatorDict[listenerAction[actionNameSymbol]]);\n      listenerActionMap[targetName] = listenerReg;\n    };\n\n    if (Array.isArray(listenTo)) {\n      listenTo.forEach(processListenTo);\n    } else {\n      processListenTo(listenTo);\n    }\n  });\n\n  selectorReducers.forEach(selector => {\n    selector[selectImpSymbol] = state => wrapFnWithMemoize(selector(state));\n  });\n\n  listenDefinitions.forEach(def => {\n    def.listeners = def.listeners || {};\n\n    const on = (target, handler) => {\n      if (typeof handler !== 'function') {\n        return;\n      }\n\n      const meta = def[metaSymbol];\n      handler[metaSymbol] = meta;\n\n      if (!handler[actionSymbol] && !handler[thunkSymbol]) {\n        if (process.env.NODE_ENV !== 'production') {\n          // eslint-disable-next-line\n          console.warn(\n            `easy-peasy: you must provide either an \"action\" or \"thunk\" to your listeners. Found an invalid handler at \"${meta.path.join(\n              '.',\n            )}\"`,\n          );\n        }\n        return;\n      }\n\n      let targetActionName;\n\n      if (\n        typeof target === 'function' &&\n        target[actionNameSymbol] &&\n        actionCreatorDict[target[actionNameSymbol]]\n      ) {\n        if (target[thunkSymbol]) {\n          targetActionName = helpers.thunkCompleteName(target);\n        } else {\n          targetActionName = target[actionNameSymbol];\n        }\n      } else if (typeof target === 'string') {\n        targetActionName = target;\n      }\n\n      if (targetActionName) {\n        if (handler[thunkSymbol]) {\n          thunkListenersDict[targetActionName] =\n            thunkListenersDict[targetActionName] || [];\n          thunkListenersDict[targetActionName].push(handler);\n        } else {\n          actionListenersDict[targetActionName] =\n            actionListenersDict[targetActionName] || [];\n          actionListenersDict[targetActionName].push({\n            path: meta.parent,\n            handler,\n          });\n        }\n        def.listeners[targetActionName] = def.listeners[targetActionName] || [];\n        def.listeners[targetActionName].push(handler);\n      }\n    };\n    def(on);\n  });\n\n  const runSelectorReducer = (state, selector) => {\n    const { parentPath, key, executed } = selector[selectStateSymbol];\n    if (executed) {\n      return state;\n    }\n    const dependencies = selector[selectDependenciesSymbol];\n\n    const stateAfterDependencies = dependencies\n      ? dependencies.reduce(runSelectorReducer, state)\n      : state;\n\n    let newState = stateAfterDependencies;\n\n    if (parentPath.length > 0) {\n      const target = get(parentPath, stateAfterDependencies);\n      if (target) {\n        if (\n          !selector.prevState ||\n          selector.prevState !== get(parentPath, state)\n        ) {\n          const newValue = selector[selectImpSymbol](target);\n          newState = produce(state, draft => {\n            const updateTarget = get(parentPath, draft);\n            updateTarget[key] = newValue;\n          });\n          selector.prevState = get(parentPath, newState);\n        }\n      }\n    } else if (!selector.prevState || selector.prevState !== state) {\n      const newValue = selector[selectImpSymbol](stateAfterDependencies);\n      newState = produce(state, draft => {\n        draft[key] = newValue;\n      });\n      selector.prevState = newState;\n    }\n\n    selector[selectStateSymbol].executed = true;\n    return newState;\n  };\n\n  const runSelectors = state =>\n    selectorReducers.reduce(runSelectorReducer, state);\n\n  const createReducer = () => {\n    const runActionReducerAtPath = (state, action, actionReducer, path) => {\n      const current = get(path, state);\n      const updatedState =\n        path.length === 0\n          ? produce(state, _draft => actionReducer(_draft, action.payload))\n          : produce(state, draft => {\n              set(\n                actionReducer[metaSymbol].parent,\n                draft,\n                produce(current, _draft =>\n                  actionReducer(_draft, action.payload),\n                ),\n              );\n            });\n\n      if (updatedState !== state) {\n        const computedPropertyCreators = get(path, computedProperties);\n        if (computedPropertyCreators) {\n          const updatedCurrent = get(path, updatedState);\n          Object.keys(computedPropertyCreators).forEach(key => {\n            computedPropertyCreators[key](updatedCurrent);\n          });\n        }\n      }\n\n      return updatedState;\n    };\n\n    const reducerForActions = (state, action) => {\n      const actionReducer = actionReducersDict[action.type];\n      if (actionReducer) {\n        return runActionReducerAtPath(\n          state,\n          action,\n          actionReducer,\n          actionReducer[metaSymbol].parent,\n        );\n      }\n      return state;\n    };\n\n    const reducerForListeners = (state, action) => {\n      const target =\n        action.type === '@@EP/LISTENER' ? action.actionName : action.type;\n      const actionListeners = actionListenersDict[target];\n      if (actionListeners) {\n        const targetAction =\n          action.type === '@@EP/LISTENER'\n            ? { type: target, payload: action.payload }\n            : action;\n        return actionListeners.reduce(\n          (newState, { path, handler }) =>\n            runActionReducerAtPath(newState, targetAction, handler, path),\n          state,\n        );\n      }\n      return state;\n    };\n\n    const reducerForCustomReducers = (state, action) => {\n      return produce(state, draft => {\n        customReducers.forEach(({ path: p, reducer: red }) => {\n          const current = get(p, draft);\n          set(p, draft, red(current, action));\n        });\n      });\n    };\n\n    let isInitial = true;\n\n    const selectsReducer = state => {\n      const stateAfterSelectors = runSelectors(state);\n      isInitial = false;\n      selectorReducers.forEach(selector => {\n        selector[selectStateSymbol].executed = false;\n      });\n      return stateAfterSelectors;\n    };\n\n    const selectorsReducer = state => {\n      const selectors = Object.values(selectorsDict);\n      return produce(state, draft => {\n        selectors.forEach(selector => {\n          const selectorState = selector[selectorStateSymbol];\n          if (selectorState.prevStateCheckId == null) {\n            selectorState.prevStateCheckId = selectorState.dependentStateChangeTracker(\n              state,\n            );\n          } else {\n            const nextStateCheckId = selectorState.dependentStateChangeTracker(\n              state,\n            );\n            if (selectorState.prevStateCheckId !== nextStateCheckId) {\n              const newSelector = selectorState.createSelector();\n              newSelector[selectorState.prevStateCheckId] = nextStateCheckId;\n              selectorsDict[selectorState.selectorId] = newSelector;\n              set(selectorState.meta.path, draft, newSelector);\n            }\n          }\n        });\n      });\n    };\n\n    const rootReducer = (state, action) => {\n      isInReducer = true;\n      const stateAfterActions = reducerForActions(state, action);\n      const stateAfterListeners = reducerForListeners(\n        stateAfterActions,\n        action,\n      );\n      const stateAfterCustomReducers = reducerForCustomReducers(\n        stateAfterListeners,\n        action,\n      );\n      const stateAfterSelect =\n        state !== stateAfterCustomReducers || isInitial\n          ? selectsReducer(stateAfterCustomReducers)\n          : stateAfterCustomReducers;\n      const result = selectorsReducer(stateAfterSelect);\n      isInReducer = false;\n      return result;\n    };\n\n    return rootReducer;\n  };\n\n  return {\n    actionCreators,\n    actionListenersDict,\n    defaultState,\n    listenDefinitions,\n    listenerActionMap,\n    listenerThunkMap,\n    reducer: reducerEnhancer(createReducer()),\n    thunkListenersDict,\n  };\n}\n","import {\n  applyMiddleware,\n  compose as reduxCompose,\n  createStore as reduxCreateStore,\n} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport { get } from './lib';\nimport { metaSymbol, actionSymbol, thunkSymbol } from './constants';\nimport * as helpers from './helpers';\nimport createStoreInternals from './create-store-internals';\nimport { useStoreActions, useStoreDispatch, useStoreState } from './hooks';\n\nexport default function createStore(model, options = {}) {\n  const {\n    compose,\n    devTools = true,\n    disableInternalSelectFnMemoize = false,\n    enhancers = [],\n    initialState = {},\n    injections,\n    middleware = [],\n    mockActions = false,\n    name: storeName = `EasyPeasyStore`,\n    reducerEnhancer = rootReducer => rootReducer,\n  } = options;\n\n  const modelDefinition = {\n    ...model,\n    logFullState: helpers.thunk((actions, payload, { getState }) => {\n      // eslint-disable-next-line no-console\n      console.log(JSON.stringify(getState(), null, 2));\n    }),\n    replaceState: helpers.action((state, payload) => payload),\n  };\n\n  const references = {};\n\n  let mockedActions = [];\n\n  const dispatchThunk = (thunk, payload) =>\n    thunk(\n      get(thunk[metaSymbol].parent, references.internals.actionCreators),\n      payload,\n      {\n        dispatch: references.dispatch,\n        getState: () => get(thunk[metaSymbol].parent, references.getState()),\n        getStoreState: references.getState,\n        injections,\n        meta: thunk[metaSymbol],\n      },\n    );\n\n  const dispatchThunkListeners = (name, payload) => {\n    const listensForAction = references.internals.thunkListenersDict[name];\n    return listensForAction && listensForAction.length > 0\n      ? Promise.all(\n          listensForAction.map(listenForAction =>\n            dispatchThunk(listenForAction, payload),\n          ),\n        )\n      : Promise.resolve();\n  };\n\n  const dispatchActionStringListeners = () => next => action => {\n    const result = next(action);\n    if (references.internals.thunkListenersDict[action.type]) {\n      dispatchThunkListeners(action.type, action.payload);\n    }\n    return result;\n  };\n\n  const composeEnhancers =\n    compose ||\n    (devTools &&\n    typeof window !== 'undefined' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          name: storeName,\n        })\n      : reduxCompose);\n\n  const bindStoreInternals = state => {\n    references.internals = createStoreInternals({\n      disableInternalSelectFnMemoize,\n      initialState: state,\n      injections,\n      model: modelDefinition,\n      reducerEnhancer,\n      references,\n    });\n  };\n\n  bindStoreInternals(initialState);\n\n  const listenerActionsMiddleware = () => next => action => {\n    const result = next(action);\n    if (\n      action &&\n      references.internals.listenerActionMap[action.type] &&\n      references.internals.listenerActionMap[action.type].length > 0\n    ) {\n      references.internals.listenerActionMap[action.type].forEach(\n        actionCreator => {\n          actionCreator(action.payload);\n        },\n      );\n    }\n    return result;\n  };\n\n  const mockActionsMiddleware = () => next => action => {\n    if (mockActions) {\n      if (\n        action == null ||\n        (typeof action === 'object' && action.type === '@@EP/LISTENER')\n      ) {\n        // DO NOTHING\n      } else {\n        mockedActions.push(action);\n      }\n      return undefined;\n    }\n    return next(action);\n  };\n\n  const currentStateMiddleware = () => next => action => {\n    references.currentState = references.getState();\n    return next(action);\n  };\n\n  const store = reduxCreateStore(\n    references.internals.reducer,\n    references.internals.defaultState,\n    composeEnhancers(\n      applyMiddleware(\n        reduxThunk,\n        dispatchActionStringListeners,\n        ...middleware,\n        listenerActionsMiddleware,\n        currentStateMiddleware,\n        mockActionsMiddleware,\n      ),\n      ...enhancers,\n    ),\n  );\n\n  store.getMockedActions = () => [...mockedActions];\n  store.clearMockedActions = () => {\n    mockedActions = [];\n  };\n\n  references.dispatch = store.dispatch;\n  references.getState = store.getState;\n\n  // attach the action creators to dispatch\n  const bindActionCreators = actionCreators => {\n    Object.keys(store.dispatch).forEach(actionsKey => {\n      delete store.dispatch[actionsKey];\n    });\n    Object.keys(actionCreators).forEach(key => {\n      store.dispatch[key] = actionCreators[key];\n    });\n    store.getActions = () => actionCreators;\n  };\n\n  bindActionCreators(references.internals.actionCreators);\n\n  const rebindStore = removeKey => {\n    const currentState = store.getState();\n    if (removeKey) {\n      delete currentState[removeKey];\n    }\n    bindStoreInternals(store.getState());\n    store.replaceReducer(references.internals.reducer);\n    store.dispatch.replaceState(references.internals.defaultState);\n    bindActionCreators(references.internals.actionCreators);\n  };\n\n  store.addModel = (key, modelForKey) => {\n    if (modelDefinition[key] && process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `easy-peasy: The store model already contains a model definition for \"${key}\"`,\n      );\n      store.removeModel(key);\n    }\n    modelDefinition[key] = modelForKey;\n    rebindStore();\n  };\n\n  store.removeModel = key => {\n    if (!modelDefinition[key]) {\n      if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `easy-peasy: The store model does not contain a model definition for \"${key}\"`,\n        );\n      }\n      return;\n    }\n    delete modelDefinition[key];\n    rebindStore(key);\n  };\n\n  // @deprecated\n  const dispatchActionListener = (actionName, payload) =>\n    store.dispatch({\n      type: '@@EP/LISTENER',\n      payload,\n      actionName,\n    });\n\n  const resolveActionName = action =>\n    typeof action === 'function'\n      ? action[actionSymbol]\n        ? helpers.actionName(action)\n        : action[thunkSymbol]\n        ? helpers.thunkCompleteName(action)\n        : undefined\n      : typeof action === 'string'\n      ? action\n      : undefined;\n\n  // @deprecated\n  store.triggerListener = (listener, action, payload) => {\n    const actionName = resolveActionName(action);\n    if (\n      listener.listeners[actionName] &&\n      listener.listeners[actionName].length > 0\n    ) {\n      if (\n        listener.listeners[actionName].some(handler => handler[actionSymbol])\n      ) {\n        dispatchActionListener(actionName, payload);\n      }\n      const thunkHandlers = listener.listeners[actionName].filter(\n        handler => handler[thunkSymbol],\n      );\n      return thunkHandlers.length > 0\n        ? Promise.all(\n            thunkHandlers.map(handler => dispatchThunk(handler, payload)),\n          ).then(() => undefined)\n        : Promise.resolve();\n    }\n    return Promise.resolve();\n  };\n\n  // @deprecated\n  store.triggerListeners = (action, payload) => {\n    const actionName = resolveActionName(action);\n    if (actionName) {\n      const actionListenerHandlers =\n        references.internals.actionListenersDict[actionName];\n      if (actionListenerHandlers && actionListenerHandlers.length > 0) {\n        dispatchActionListener(actionName, payload);\n      }\n      const thunkListenerHandlers =\n        references.internals.thunkListenersDict[actionName];\n      return thunkListenerHandlers && thunkListenerHandlers.length > 0\n        ? Promise.all(\n            thunkListenerHandlers.map(handler =>\n              dispatchThunk(handler, payload),\n            ),\n          ).then(() => undefined)\n        : Promise.resolve();\n    }\n    return Promise.resolve();\n  };\n\n  store.useStoreActions = useStoreActions;\n  store.useStoreDispatch = useStoreDispatch;\n  store.useStoreState = useStoreState;\n\n  return store;\n}\n","import { setAutoFreeze } from 'immer-peasy';\nimport {\n  createTypedHooks,\n  useActions,\n  useDispatch,\n  useStore,\n  useStoreActions,\n  useStoreDispatch,\n  useStoreState,\n} from './hooks';\nimport createStore from './create-store';\nimport createContextStore from './create-context-store';\nimport createComponentStore from './create-component-store';\nimport StoreProvider from './provider';\nimport {\n  action,\n  actionName,\n  computed,\n  debug,\n  listen,\n  memo,\n  reducer,\n  select,\n  selector,\n  thunk,\n  thunkCompleteName,\n  thunkFailName,\n  thunkStartName,\n} from './helpers';\n\n/**\n * immer is an implementation detail, so we are not going to use its auto freeze\n * behaviour, which throws errors if trying to mutate state. It's also risky\n * for production builds as has a perf overhead.\n *\n * @see https://github.com/mweststrate/immer#auto-freezing\n */\nsetAutoFreeze(false);\n\nexport {\n  action,\n  actionName,\n  computed,\n  createContextStore,\n  createComponentStore,\n  createStore,\n  createTypedHooks,\n  debug,\n  listen,\n  memo,\n  reducer,\n  select,\n  selector,\n  StoreProvider,\n  thunk,\n  thunkCompleteName,\n  thunkFailName,\n  thunkStartName,\n  useActions,\n  useDispatch,\n  useStore,\n  useStoreActions,\n  useStoreDispatch,\n  useStoreState,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport StoreContext from './context';\n\nconst StoreProvider = ({ children, store }) => (\n  <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n);\n\nStoreProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  store: PropTypes.object.isRequired,\n};\n\nexport default StoreProvider;\n","import { useMemo, useState, useRef, useEffect } from 'react';\nimport createStore from './create-store';\n\n/**\n * Some good references on the topic of reinitialisation:\n * - https://github.com/facebook/react/issues/14830\n */\n\nexport default function createComponentStore(model, config) {\n  return function useLocalStore(initialData) {\n    const store = useMemo(\n      () =>\n        createStore(\n          typeof model === 'function' ? model(initialData) : model,\n          config,\n        ),\n      [],\n    );\n    const previousStateRef = useRef(store.getState());\n    const [currentState, setCurrentState] = useState(() => store.getState());\n    useEffect(() => {\n      return store.subscribe(() => {\n        const nextState = store.getState();\n        if (previousStateRef.current !== nextState) {\n          previousStateRef.current = nextState;\n          setCurrentState(nextState);\n        }\n      });\n    }, [store]);\n    return [currentState, store.dispatch];\n  };\n}\n","/* eslint-disable react/prop-types */\n\nimport React, { createContext, useContext, useMemo } from 'react';\nimport {\n  createStoreActionsHook,\n  createStoreDispatchHook,\n  createStoreStateHook,\n} from './hooks';\nimport createStore from './create-store';\n\nexport default function createContextStore(model, config) {\n  const StoreContext = createContext();\n\n  function Provider({ children, initialData }) {\n    const store = useMemo(\n      () =>\n        createStore(\n          typeof model === 'function' ? model(initialData) : model,\n          config,\n        ),\n      [],\n    );\n    return (\n      <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n    );\n  }\n\n  function useStore() {\n    return useContext(StoreContext);\n  }\n\n  return {\n    Provider,\n    useStore,\n    useStoreState: createStoreStateHook(StoreContext),\n    useStoreActions: createStoreActionsHook(StoreContext),\n    useStoreDispatch: createStoreDispatchHook(StoreContext),\n  };\n}\n"],"names":["objA","objB","compare","compareContext","ret","call","keysA","Object","keys","keysB","length","bHasOwnProperty","prototype","hasOwnProperty","bind","idx","key","valueA","valueB","StoreContext","createContext","isStateObject","x","Array","isArray","get","path","target","reduce","acc","cur","undefined","set","value","createStoreStateHook","Context","mapState","dependencies","store","useContext","useState","getState","state","setState","error","setError","stateRef","useRef","isActive","unmounted","useEffect","current","calculateState","newState","shallowEqual","err","setTimeout","unsubscribe","subscribe","useStoreState","EasyPeasyContext","createStoreActionsHook","mapActions","dispatch","useStoreActions","createStoreDispatchHook","useStoreDispatch","wrapWithWarning","prev","next","useImp","useActions","useDispatch","useStore","actionNameSymbol","actionSymbol","actionStateSymbol","computedSymbol","computedConfigSymbol","listenSymbol","metaSymbol","reducerSymbol","selectDependenciesSymbol","selectImpSymbol","selectStateSymbol","selectSymbol","selectorSymbol","selectorConfigSymbol","selectorStateSymbol","thunkSymbol","thunkStateSymbol","actionName","action","thunkCompleteName","fn","config","defaultStateResolvers","thunk","maxSelectFnMemoize","tick","Promise","resolve","errorToPayload","Error","message","stack","createStoreInternals","disableInternalSelectFnMemoize","initialState","injections","model","reducerEnhancer","references","isInReducer","defaultState","selectorId","computedProperties","actionCreatorDict","actionCreators","actionListenersDict","actionReducersDict","actionThunks","customReducers","listenDefinitions","listenerActionDefinitions","listenerActionMap","selectorsDict","selectorReducers","thunkListenersDict","recursiveExtractDefsFromModel","parentPath","forEach","meta","parent","name","join","actionReducer","actionCreator","payload","type","listenTo","push","getStoreActions","getStoreState","then","result","catch","stateResolvers","memoisedResultFn","memoizerific","createComputedProperty","o","defineProperty","configurable","storeState","currentState","inputs","map","resolver","selectorInstanceId","args","stateSelectors","s","limit","number","internalSelector","a","slice","changeIdx","selector","createSelector","internalChecker","localState","selectedStateArgs","argSelector","runtimeArgs","concat","dependentStateChangeTracker","resolvedStateArgs","executed","reducer","initialParentRef","listenerAction","targetName","processListenTo","helpers","listenerReg","def","listeners","handler","targetActionName","runActionReducerAtPath","isInitial","selectsReducer","runSelectorReducer","stateAfterDependencies","prevState","newValue","produce","draft","listenerThunkMap","updatedState","_draft","computedPropertyCreators","updatedCurrent","stateAfterSelectors","selectors","stateAfterListeners","actionListeners","targetAction","reducerForListeners","stateAfterCustomReducers","p","red","stateAfterSelect","values","selectorState","prevStateCheckId","nextStateCheckId","newSelector","createStore","options","compose","devTools","enhancers","middleware","mockActions","storeName","rootReducer","modelDefinition","logFullState","actions","console","log","JSON","stringify","replaceState","mockedActions","dispatchThunk","internals","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reduxCompose","bindStoreInternals","reduxCreateStore","applyMiddleware","reduxThunk","listensForAction","all","listenForAction","getMockedActions","clearMockedActions","bindActionCreators","actionsKey","getActions","rebindStore","removeKey","replaceReducer","addModel","modelForKey","removeModel","dispatchActionListener","resolveActionName","triggerListener","listener","some","thunkHandlers","filter","triggerListeners","actionListenerHandlers","thunkListenerHandlers","children","React","Provider","initialData","useMemo","previousStateRef","setCurrentState","nextState","isDraft","finishDraft","createDraft","cacheSize"],"mappings":"+jBAEA,MAAiB,SAAsBA,EAAMC,EAAMC,EAASC,GAC1D,IAAIC,EAAMF,EAAUA,EAAQG,KAAKF,EAAgBH,EAAMC,QAAQ,EAE/D,QAAY,IAARG,EACF,QAASA,EAGX,GAAIJ,IAASC,EACX,OAAO,EAGT,GAAoB,iBAATD,IAAsBA,GAAwB,iBAATC,IAAsBA,EACpE,OAAO,EAGT,IAAIK,EAAQC,OAAOC,KAAKR,GACpBS,EAAQF,OAAOC,KAAKP,GAExB,GAAIK,EAAMI,SAAWD,EAAMC,OACzB,OAAO,EAMT,IAHA,IAAIC,EAAkBJ,OAAOK,UAAUC,eAAeC,KAAKb,GAGlDc,EAAM,EAAGA,EAAMT,EAAMI,OAAQK,IAAO,CAC3C,IAAIC,EAAMV,EAAMS,GAEhB,IAAKJ,EAAgBK,GACnB,OAAO,EAGT,IAAIC,EAASjB,EAAKgB,GACdE,EAASjB,EAAKe,GAIlB,IAAY,KAFZZ,EAAMF,EAAUA,EAAQG,KAAKF,EAAgBc,EAAQC,EAAQF,QAAO,SAEtC,IAARZ,GAAkBa,IAAWC,EACjD,OAAO,EAIX,OAAO,GC1CHC,EAAeC,kBCFRC,EAAgB,SAAAC,UACrB,OAANA,GAA2B,iBAANA,IAAmBC,MAAMC,QAAQF,IAE3CG,EAAM,SAACC,EAAMC,UACxBD,EAAKE,OACH,SAACC,EAAKC,UAAST,EAAcQ,GAAOA,EAAIC,QAAOC,GAC/CJ,IAGSK,EAAM,SAACN,EAAMC,EAAQM,GAChCP,EAAKE,OAAO,SAACC,EAAKC,EAAKf,UACjBA,EAAM,IAAMW,EAAKhB,OACnBmB,EAAIC,GAAOG,EAEXJ,EAAIC,GAAOD,EAAIC,IAAQ,GAElBD,EAAIC,IACVH,ICZE,SAASO,EAAqBC,UAC5B,SAAuBC,EAAUC,YAAAA,IAAAA,EAAe,QAC/CC,EAAQC,aAAWJ,KACCK,WAAS,kBAAMJ,EAASE,EAAMG,cAAjDC,OAAOC,SACYH,WAAS,MAA5BI,OAAOC,OAGRC,EAAWC,SAAOL,GAElBM,EAAWD,UAAO,GAElBE,EAAYF,UAAO,MAGrBH,QACIA,SAERM,YAAU,WACRF,EAASG,SAAU,MACbC,EAAiB,cAChBJ,EAASG,gBAINE,EAAWjB,EAASE,EAAMG,eAE9BY,IAAaP,EAASK,SACrB9B,EAAcgC,IACbhC,EAAcyB,EAASK,UACvBG,EAAaD,EAAUP,EAASK,gBAKpCL,EAASK,QAAUE,EACnBV,EAAS,kBAAMG,EAASK,UACxB,MAAOI,GAaPP,EAASG,SAAU,EAEnBK,WAAW,WACJP,EAAUE,SAAYH,EAASG,SAClCN,EAASU,IAEV,OAGPH,QACMK,EAAcnB,EAAMoB,UAAUN,UAC7B,WACLJ,EAASG,SAAU,EACnBM,MAEDpB,GAIHa,YAAU,kBACD,WACLD,EAAUE,SAAU,IAErB,IACIT,OAIEiB,EAAgBzB,EAAqB0B,GAE3C,SAASC,EAAuB1B,UAC9B,SAAyB2B,UAEvBA,EADOvB,aAAWJ,GACD4B,eAIfC,EAAkBH,EAAuBD,GAE/C,SAASK,EAAwB9B,UAC/B,kBACSI,aAAWJ,GACZ4B,cAIJG,EAAmBD,EAAwBL,GAElDO,EAAkB,SAACC,EAAMC,EAAMC,UAE5B,kBAQEA,4BAIEC,EAAaJ,EACxB,EACA,EACAH,GAGWQ,EAAcL,EACzB,EACA,EACAD,GAGWO,EAAWN,EACtB,EACA,EACAR,kNCnIK,IAAMe,EAAmB,iBACnBC,EAAe,aACfC,EAAoB,kBAEpBC,EAAiB,qBACjBC,EAAuB,2BAEvBC,GAAe,aAEfC,GAAa,WAEbC,GAAgB,cAEhBC,EAA2B,yBAC3BC,EAAkB,gBAClBC,GAAoB,kBACpBC,GAAe,aAEfC,GAAiB,eACjBC,GAAuB,qBACvBC,GAAsB,oBAEtBC,GAAc,YACdC,GAAmB,iBCJnBC,EAAa,SAAAC,UAAUA,EAAOlB,IAY9BmB,GAAoB,SAAAD,UAC5BA,EAAOlB,kBAICkB,EAAS,SAACE,EAAIC,UACzBD,EAAGnB,IAAgB,EACnBmB,EAAGlB,GAAqB,CACtBmB,OAAAA,GAEKD,GAGHE,EAAwB,CAAC,SAAAtD,UAASA,IAiB3BuD,EAAQ,SAACH,EAAIC,UACxBD,EAAGL,KAAe,EAClBK,EAAGJ,IAAoB,CACrBK,OAAAA,GAEKD,GC1CHI,EAAqB,IACrBC,GAAO,kBAAM,IAAIC,QAAQ,SAAAC,UAAW7C,WAAW6C,MAE/CC,GAAiB,SAAA/C,UACjBA,aAAegD,MACV,CACLC,QAASjD,EAAIiD,QACbC,MAAOlD,EAAIkD,OAGI,iBAARlD,EACFA,UAKI,SAASmD,SACtBC,IAAAA,+BACAC,IAAAA,aACAC,IAAAA,WACAC,IAAAA,MACAC,IAAAA,gBACAC,IAAAA,WAEIC,GAAc,EAOZC,EAAeN,GAAgB,GACjCO,EAAa,EAEXC,EAAqB,GAErBC,EAAoB,GACpBC,EAAiB,GAEjBC,EAAsB,GAEtBC,EAAqB,GAGrBC,EAAe,GAEfC,EAAiB,GAEjBC,EAAoB,GAEpBC,EAA4B,GAC5BC,EAAoB,GAGpBC,EAAgB,GAChBC,EAAmB,GAEnBC,EAAqB,IAEW,SAAhCC,EAAiC9E,EAAS+E,UAC9C3H,OAAOC,KAAK2C,GAASgF,QAAQ,SAAAnH,OACrBiB,EAAQkB,EAAQnC,GAChBU,YAAWwG,GAAYlH,IACvBoH,EAAO,CACXC,OAAQH,EACRxG,KAAAA,MAEmB,mBAAVO,KACLA,EAAM0C,GAAe,KACjB2D,aAAkB5G,EAAK6G,KAAK,KAClCtG,EAAMyC,GAAoB4D,EAC1BrG,EAAM+C,IAAcoD,MAGdI,EAAgBvG,EACtBuG,EAAc9D,GAAoB4D,EAClCd,EAAmBc,GAAQE,MAIrBC,EAAgB,SAAAC,UACL1B,EAAWjD,SAAS,CACjC4E,KAAMH,EAAc9D,GACpBgE,QAAAA,KAKJrB,EADAoB,EAAc/D,GAAoB4D,GACRG,EAC1BzG,EAAIN,EAAM4F,EAAgBmB,OAElB1C,EAAW9D,EAAM2C,GAAjBmB,OACJA,GAAUA,EAAO6C,UACnBhB,EAA0BiB,KAAK5G,QAE5B,GAAIA,EAAMwD,IAAc,KACvB6C,YAAiB5G,EAAK6G,KAAK,KACjCtG,EAAMyC,GAAoB4D,MAGpB1C,EAAS,SAAA8C,UACNzG,EAAMR,EAAIyG,EAAYZ,GAAiBoB,EAAS,CAErD3E,SAAUiD,EAAWjD,SACrBtB,SAAU,kBAAMhB,EAAIyG,EAAYlB,EAAWvE,aAC3CqG,gBAAiB,kBAAMxB,GACvByB,cAAe/B,EAAWvE,SAC1BoE,WAAAA,EACAuB,KAAAA,KAGJpG,EAAIN,EAAM+F,EAAc7B,OAGlB6C,EAAgB,SAAAC,UACpBvC,KACG6C,KAAK,kBACJhC,EAAWjD,SAAS,CAClB4E,KAASL,cACTI,QAAAA,MAGHM,KAAK,kBAAMhC,EAAWjD,SAAS,kBAAM6B,EAAO8C,OAC5CM,KAAK,SAAAC,UACJjC,EAAWjD,SAAS,CAClB4E,KAASL,gBACTI,QAAAA,IAEKO,IAERC,MAAM,SAAA3F,SACLyD,EAAWjD,SAAS,CAClB4E,KAASL,aACTI,QAAAA,EACA9F,MAAO0D,GAAe/C,KAElBA,KAIZ8D,EADAoB,EAAc/D,GAAoB4D,GACRG,EAC1BzG,EAAIN,EAAM4F,EAAgBmB,OAElB1C,EAAW9D,EAAMyD,IAAjBK,OACJA,GAAUA,EAAO6C,UACnBhB,EAA0BiB,KAAK5G,QAE5B,GAAIA,EAAM4C,GAAiB,KAC5BlD,EAASF,EAAIyG,EAAYhB,GACxBvF,GAEHK,EAAIkG,EAAYhB,EADhBvF,EAAS,QAIHwH,EADOlH,EAAM6C,GACbqE,eACFC,EAAmBC,EAAa,EAAbA,CAAgBpH,GAEnCqH,EAAyB,SAAAC,GAC7BhJ,OAAOiJ,eAAeD,EAAGvI,EAAK,CAC5ByI,cAAc,EACdhI,IAAK,eACGiI,EAAazC,EACfD,EAAW2C,aACX3C,EAAWvE,WACTC,EAAQjB,EAAIyG,EAAYwB,GACxBE,EAAST,EAAeU,IAAI,SAAAC,UAChCA,EAASpH,EAAOgH,YAEVN,eAAoBQ,IAG9B5H,IAAK,iBACG,IAAIuE,2CAC6B7E,EAAK6G,KACxC,oEAMVe,EAAuB3H,GACvBK,EAAIN,EAAM0F,EAAoBkC,QACzB,GAAIrH,EAAMqD,IAAiB,KAE1ByE,EADN5C,GAAc,IAEWlF,EAAMsD,IAAvByE,IAAAA,KAAMjE,IAAAA,OACRkE,EACJD,GAAQzI,MAAMC,QAAQwI,GAClBA,EAAKH,IAAI,SAAAK,UAAKb,EAAa,EAAbA,CAAgBa,KAC9B,CAAC,SAAAxH,UAASA,IACVyH,EACc,iBAAXpE,GACiB,iBAAjBA,EAAOoE,OACC,EAAfpE,EAAOoE,MACHpE,EAAOqE,OACP,EACAC,EAAmBhB,EAAac,EAAbd,CAAoB,sCAAIiB,2BAAAA,yBAC/CrI,EACEqI,EAAEC,MAAM,EAAGN,EAAevJ,QAC1B4J,EAAEC,MAAMN,EAAevJ,WAGvB8J,EAAY,EAqDVC,EArBiB,SAAjBC,QAvBEC,EAwBAF,EAAW,mBACTf,EAAa1C,EAAWvE,WACxBmI,EAAanJ,EAAIyG,EAAYwB,GAC7BmB,EAAoBZ,EAAerI,OACvC,SAACC,EAAKiJ,mBACDjJ,GACHiJ,EAAYF,EAAYlB,MAE1B,uBARiBqB,2BAAAA,yBAUZV,eAAoBQ,EAAkBG,OAAOD,YAEtDN,EAASjF,IAAuB,CAC9ByF,6BArCIN,EAAkBtB,EAAa,EAAbA,CAAgB,kBACtCmB,GAAa,IAGqB,SAAAd,OAC5BkB,EAAanJ,EAAIyG,EAAYwB,GAC7BwB,EAAoBjB,EAAerI,OACvC,SAACC,EAAKiJ,UACJjJ,EAAIgH,KAAKiC,EAAYF,EAAYlB,IAC1B7H,GAET,WAEK8I,eAAmBO,KAyB1BR,eAAAA,EACAtC,KAAAA,EACAjB,WAAY4C,GAEPU,EAEQC,GACjB5C,EAAcX,GAAcsD,EAC5BzI,EAAIN,EAAMwF,EAAcuD,QACfxI,EAAMoD,KACfpD,EAAMmD,IAAqB,CAAE8C,WAAAA,EAAYlH,IAAAA,EAAKmK,UAAU,GACxDpD,EAAiBc,KAAK5G,IACbA,EAAMgD,IACfyC,EAAemB,KAAK,CAAEnH,KAAAA,EAAM0J,QAASnJ,IAC5BA,EAAM8C,MACf4C,EAAkBkB,KAAK5G,GACvBA,EAAM+C,IAAcoD,QASjB,GAAI/G,EAAcY,IAAsC,EAA5B1B,OAAOC,KAAKyB,GAAOvB,OAEpC,MADCe,EAAIC,EAAMwF,IAEzBlF,EAAIN,EAAMwF,EAAc,IAE1Be,EAA8BhG,EAAOP,OAChC,KAEC2J,EAAmB5J,EAAIyG,EAAYtB,GAEvC5E,EAAIN,EAAMwF,EADRmE,GAAoBrK,KAAOqK,EACLA,EAAiBrK,GAEjBiB,MAKhCgG,CAA8BnB,EAAO,IAErCc,EAA0BO,QAAQ,SAAAmD,OAI5BC,EAFQ3C,GACR0C,EAAe1G,IAAsB0G,EAAe5F,KADtDK,OAAU6C,SAIN4C,EAAkB,SAAA7J,GAEF,mBAAXA,GACPA,EAAO+C,IACP2C,EAAkB1F,EAAO+C,IAGvB6G,EADE5J,EAAO8D,IACIgG,GAA0B9J,GAE1BA,EAAO+C,GAEK,iBAAX/C,IAChB4J,EAAa5J,OAET+J,EAAc7D,EAAkB0D,IAAe,GACrDG,EAAY7C,KAAKxB,EAAkBiE,EAAe5G,KAClDmD,EAAkB0D,GAAcG,GAG9BnK,MAAMC,QAAQoH,GAChBA,EAAST,QAAQqD,GAEjBA,EAAgB5C,KAIpBb,EAAiBI,QAAQ,SAAAsC,GACvBA,EAAStF,GAAmB,SAAAzC,UA5SJpB,EA4S+BmJ,EAAS/H,GA3S/DiE,GAA+C,mBAANrF,EAEtCA,EADA+H,EAAanD,EAAbmD,CAAiC/H,GAFb,IAAAA,KA+S1BqG,EAAkBQ,QAAQ,SAAAwD,GACxBA,EAAIC,UAAYD,EAAIC,WAAa,GAuDjCD,EArDW,SAAChK,EAAQkK,MACK,mBAAZA,OAmBPC,EAfE1D,EAAOuD,EAAI3G,IACjB6G,EAAQ7G,IAAcoD,GAEjByD,EAAQlH,IAAkBkH,EAAQpG,OAenB,mBAAX9D,GACPA,EAAO+C,IACP2C,EAAkB1F,EAAO+C,IAGvBoH,EADEnK,EAAO8D,IACUgG,GAA0B9J,GAE1BA,EAAO+C,GAED,iBAAX/C,IAChBmK,EAAmBnK,GAGjBmK,IACED,EAAQpG,KACVuC,EAAmB8D,GACjB9D,EAAmB8D,IAAqB,GAC1C9D,EAAmB8D,GAAkBjD,KAAKgD,KAE1CtE,EAAoBuE,GAClBvE,EAAoBuE,IAAqB,GAC3CvE,EAAoBuE,GAAkBjD,KAAK,CACzCnH,KAAM0G,EAAKC,OACXwD,QAAAA,KAGJF,EAAIC,UAAUE,GAAoBH,EAAIC,UAAUE,IAAqB,GACrEH,EAAIC,UAAUE,GAAkBjD,KAAKgD,cAkDnCE,EAoEFC,EAEEC,EAlHFC,EAAqB,SAArBA,EAAsBxJ,EAAO+H,SACKA,EAASrF,IAAvC8C,IAAAA,WAAYlH,IAAAA,SAAKmK,gBAEhBzI,MAEHL,EAAeoI,EAASvF,GAExBiH,EAAyB9J,EAC3BA,EAAaT,OAAOsK,EAAoBxJ,GACxCA,EAEAW,EAAW8I,KAES,EAApBjE,EAAWxH,OAAY,KACnBiB,EAASF,EAAIyG,EAAYiE,MAC3BxK,KAEC8I,EAAS2B,WACV3B,EAAS2B,YAAc3K,EAAIyG,EAAYxF,IACvC,KACM2J,EAAW5B,EAAStF,GAAiBxD,GAC3C0B,EAAWiJ,EAAQ5J,EAAO,SAAA6J,GACH9K,EAAIyG,EAAYqE,GACxBvL,GAAOqL,IAEtB5B,EAAS2B,UAAY3K,EAAIyG,EAAY7E,SAGpC,IAAKoH,EAAS2B,WAAa3B,EAAS2B,YAAc1J,EAAO,KACxD2J,EAAW5B,EAAStF,GAAiBgH,GAC3C9I,EAAWiJ,EAAQ5J,EAAO,SAAA6J,GACxBA,EAAMvL,GAAOqL,IAEf5B,EAAS2B,UAAY/I,SAGvBoH,EAASrF,IAAmB+F,UAAW,EAChC9H,SAqIF,CACLiE,eAAAA,EACAC,oBAAAA,EACAL,aAAAA,EACAS,kBAAAA,EACAE,kBAAAA,EACA2E,iBAhgBuB,GAigBvBpB,QAASrE,GArIHgF,EAAyB,SAACrJ,EAAOkD,EAAQ4C,EAAe9G,OACtDyB,EAAU1B,EAAIC,EAAMgB,GACpB+J,EACY,IAAhB/K,EAAKhB,OACD4L,EAAQ5J,EAAO,SAAAgK,UAAUlE,EAAckE,EAAQ9G,EAAO8C,WACtD4D,EAAQ5J,EAAO,SAAA6J,GACbvK,EACEwG,EAAcxD,IAAYqD,OAC1BkE,EACAD,EAAQnJ,EAAS,SAAAuJ,UACflE,EAAckE,EAAQ9G,EAAO8C,iBAKrC+D,IAAiB/J,EAAO,KACpBiK,EAA2BlL,EAAIC,EAAM0F,MACvCuF,EAA0B,KACtBC,EAAiBnL,EAAIC,EAAM+K,GACjClM,OAAOC,KAAKmM,GAA0BxE,QAAQ,SAAAnH,GAC5C2L,EAAyB3L,GAAK4L,aAK7BH,GA2CLT,GAAY,EAEVC,EAAiB,SAAAvJ,OA1EJA,EA2EXmK,GA3EWnK,EA2EwBA,EA1E3CqF,EAAiBnG,OAAOsK,EAAoBxJ,WA2E1CsJ,GAAY,EACZjE,EAAiBI,QAAQ,SAAAsC,GACvBA,EAASrF,IAAmB+F,UAAW,IAElC0B,GA2BW,SAACnK,EAAOkD,GAC1BqB,GAAc,MA5EWvE,EAAOkD,EAC1B4C,EA8BiC5C,EAoBhBlD,EACjBoK,EA0BAC,EAjEoB,SAACrK,EAAOkD,OAC5BjE,EACY,kBAAhBiE,EAAO+C,KAA2B/C,EAAOD,WAAaC,EAAO+C,KACzDqE,EAAkBzF,EAAoB5F,MACxCqL,EAAiB,KACbC,EACY,kBAAhBrH,EAAO+C,KACH,CAAEA,KAAMhH,EAAQ+G,QAAS9C,EAAO8C,SAChC9C,SACCoH,EAAgBpL,OACrB,SAACyB,SAAY3B,IAAAA,KAAMmK,IAAAA,eACjBE,EAAuB1I,EAAU4J,EAAcpB,EAASnK,IAC1DgB,UAGGA,EAkDqBwK,EA9EHxK,EA6EmBA,GA5EtC8F,EAAgBhB,GADU5B,EA6EmBA,GA5EH+C,OAEvCoD,EACLrJ,EACAkD,EACA4C,EACAA,EAAcxD,IAAYqD,QAGvB3F,GAsELkD,GAEIuH,GAnDiCvH,EAqDrCA,EApDK0G,EAmDLS,EAnDoB,SAAAR,GACpB7E,EAAeS,QAAQ,gBAASiF,IAAN1L,KAAkB2L,IAATjC,QAC3BjI,EAAU1B,EAAI2L,EAAGb,GACvBvK,EAAIoL,EAAGb,EAAOc,EAAIlK,EAASyC,SAmDzB0H,EACJ5K,IAAUyK,GAA4BnB,EAClCC,EAAekB,GACfA,EACAlE,GAvCiBvG,EAuCS4K,EAtC1BR,EAAYvM,OAAOgN,OAAOzF,GACzBwE,EAAQ5J,EAAO,SAAA6J,GACpBO,EAAU3E,QAAQ,SAAAsC,OACV+C,EAAgB/C,EAASjF,OACO,MAAlCgI,EAAcC,iBAChBD,EAAcC,iBAAmBD,EAAcvC,4BAC7CvI,OAEG,KACCgL,EAAmBF,EAAcvC,4BACrCvI,MAEE8K,EAAcC,mBAAqBC,EAAkB,KACjDC,EAAcH,EAAc9C,iBAClCiD,EAAYH,EAAcC,kBAAoBC,EAC9C5F,EAAc0F,EAAcrG,YAAcwG,EAC1C3L,EAAIwL,EAAcpF,KAAK1G,KAAM6K,EAAOoB,iBAuB5C1G,GAAc,EACPgC,KAcTjB,mBAAAA,GClkBW,SAAS4F,EAAY9G,EAAO+G,YAAAA,IAAAA,EAAU,UAY/CA,EAVFC,IAAAA,YACAC,SAAAA,oBACApH,+BAAAA,oBACAqH,UAAAA,aAAY,SACZpH,aAAAA,aAAe,KACfC,IAAAA,eACAoH,WAAAA,aAAa,SACbC,YAAAA,oBACA5F,KAAM6F,oCACNpH,gBAAAA,aAAkB,SAAAqH,UAAeA,KAG7BC,OACDvH,GACHwH,aAAc7C,EAAc,SAAC8C,EAAS7F,SAAWjG,IAAAA,SAE/C+L,QAAQC,IAAIC,KAAKC,UAAUlM,IAAY,KAAM,MAE/CmM,aAAcnD,EAAe,SAAC/I,EAAOgG,UAAYA,MAG7C1B,EAAa,GAEf6H,EAAgB,GAEdC,EAAgB,SAAC7I,EAAOyC,UAC5BzC,EACExE,EAAIwE,EAAMjB,IAAYqD,OAAQrB,EAAW+H,UAAUzH,gBACnDoB,EACA,CACE3E,SAAUiD,EAAWjD,SACrBtB,SAAU,kBAAMhB,EAAIwE,EAAMjB,IAAYqD,OAAQrB,EAAWvE,aACzDsG,cAAe/B,EAAWvE,SAC1BoE,WAAAA,EACAuB,KAAMnC,EAAMjB,OAuBZgK,EACJlB,IACCC,GACiB,oBAAXkB,QACPA,OAAOC,qCACHD,OAAOC,qCAAqC,CAC1C5G,KAAM6F,IAERgB,WAEAC,EAAqB,SAAA1M,GACzBsE,EAAW+H,UAAYrI,EAAqB,CAC1CC,+BAAAA,EACAC,aAAclE,EACdmE,WAAAA,EACAC,MAAOuH,EACPtH,gBAAAA,EACAC,WAAAA,KAIJoI,EAAmBxI,OAsCbtE,EAAQ+M,cACZrI,EAAW+H,UAAU3D,QACrBpE,EAAW+H,UAAU7H,aACrB8H,gBACEM,gCACEC,EAxEgC,kBAAM,SAAAlL,UAAQ,SAAAuB,OAXpB0C,EAAMI,EAC9B8G,EAWAvG,EAAS5E,EAAKuB,UAChBoB,EAAW+H,UAAU/G,mBAAmBpC,EAAO+C,QAbrBL,EAcL1C,EAAO+C,KAdID,EAcE9C,EAAO8C,SAbvC8G,EAAmBxI,EAAW+H,UAAU/G,mBAAmBM,KACZ,EAA1BkH,EAAiB9O,OACxC0F,QAAQqJ,IACND,EAAiB3F,IAAI,SAAA6F,UACnBZ,EAAcY,EAAiBhH,MAGnCtC,QAAQC,WAQL4C,aAqEAgF,GA3CyB,kBAAM,SAAA5J,UAAQ,SAAAuB,OACxCqD,EAAS5E,EAAKuB,UAElBA,GACAoB,EAAW+H,UAAUlH,kBAAkBjC,EAAO+C,OACe,EAA7D3B,EAAW+H,UAAUlH,kBAAkBjC,EAAO+C,MAAMjI,QAEpDsG,EAAW+H,UAAUlH,kBAAkBjC,EAAO+C,MAAMR,QAClD,SAAAM,GACEA,EAAc7C,EAAO8C,WAIpBO,KAkBsB,kBAAM,SAAA5E,UAAQ,SAAAuB,UAC3CoB,EAAW2C,aAAe3C,EAAWvE,WAC9B4B,EAAKuB,MAjBgB,kBAAM,SAAAvB,UAAQ,SAAAuB,OACtCsI,SAWG7J,EAAKuB,GATE,MAAVA,GACmB,iBAAXA,GAAuC,kBAAhBA,EAAO+C,MAItCkG,EAAchG,KAAKjD,iBAwBlBoI,KAIP1L,EAAMqN,iBAAmB,2BAAUd,IACnCvM,EAAMsN,mBAAqB,WACzBf,EAAgB,IAGlB7H,EAAWjD,SAAWzB,EAAMyB,SAC5BiD,EAAWvE,SAAWH,EAAMG,aAGtBoN,EAAqB,SAAAvI,GACzB/G,OAAOC,KAAK8B,EAAMyB,UAAUoE,QAAQ,SAAA2H,UAC3BxN,EAAMyB,SAAS+L,KAExBvP,OAAOC,KAAK8G,GAAgBa,QAAQ,SAAAnH,GAClCsB,EAAMyB,SAAS/C,GAAOsG,EAAetG,KAEvCsB,EAAMyN,WAAa,kBAAMzI,IAG3BuI,EAAmB7I,EAAW+H,UAAUzH,oBAElC0I,EAAc,SAAAC,OACZtG,EAAerH,EAAMG,WACvBwN,UACKtG,EAAasG,GAEtBb,EAAmB9M,EAAMG,YACzBH,EAAM4N,eAAelJ,EAAW+H,UAAU3D,SAC1C9I,EAAMyB,SAAS6K,aAAa5H,EAAW+H,UAAU7H,cACjD2I,EAAmB7I,EAAW+H,UAAUzH,iBAG1ChF,EAAM6N,SAAW,SAACnP,EAAKoP,GACjB/B,EAAgBrN,GAOpBqN,EAAgBrN,GAAOoP,EACvBJ,KAGF1N,EAAM+N,YAAc,SAAArP,GACbqN,EAAgBrN,YASdqN,EAAgBrN,GACvBgP,EAAYhP,SAIRsP,EAAyB,SAAC3K,EAAY+C,UAC1CpG,EAAMyB,SAAS,CACb4E,KAAM,gBACND,QAAAA,EACA/C,WAAAA,KAGE4K,EAAoB,SAAA3K,SACN,mBAAXA,EACHA,EAAOjB,GACL8G,EAAmB7F,GACnBA,EAAOH,IACPgG,GAA0B7F,QAC1B7D,EACgB,iBAAX6D,EACPA,OACA7D,UAGNO,EAAMkO,gBAAkB,SAACC,EAAU7K,EAAQ8C,OACnC/C,EAAa4K,EAAkB3K,MAEnC6K,EAAS7E,UAAUjG,IACqB,EAAxC8K,EAAS7E,UAAUjG,GAAYjF,OAC/B,CAEE+P,EAAS7E,UAAUjG,GAAY+K,KAAK,SAAA7E,UAAWA,EAAQlH,MAEvD2L,EAAuB3K,EAAY+C,OAE/BiI,EAAgBF,EAAS7E,UAAUjG,GAAYiL,OACnD,SAAA/E,UAAWA,EAAQpG,aAES,EAAvBkL,EAAcjQ,OACjB0F,QAAQqJ,IACNkB,EAAc9G,IAAI,SAAAgC,UAAWiD,EAAcjD,EAASnD,MACpDM,KAAK,cACP5C,QAAQC,iBAEPD,QAAQC,WAIjB/D,EAAMuO,iBAAmB,SAACjL,EAAQ8C,OAC1B/C,EAAa4K,EAAkB3K,MACjCD,EAAY,KACRmL,EACJ9J,EAAW+H,UAAUxH,oBAAoB5B,GACvCmL,GAA0D,EAAhCA,EAAuBpQ,QACnD4P,EAAuB3K,EAAY+C,OAE/BqI,EACJ/J,EAAW+H,UAAU/G,mBAAmBrC,UACnCoL,GAAwD,EAA/BA,EAAsBrQ,OAClD0F,QAAQqJ,IACNsB,EAAsBlH,IAAI,SAAAgC,UACxBiD,EAAcjD,EAASnD,MAEzBM,KAAK,cACP5C,QAAQC,iBAEPD,QAAQC,WAGjB/D,EAAM0B,gBAAkBA,EACxB1B,EAAM4B,iBAAmBA,EACzB5B,EAAMqB,cAAgBA,EAEfrB,mBC5OK,mBCjCQ,gBAAG0O,IAAAA,SAAU1O,IAAAA,aACjC2O,gBAAC9P,EAAa+P,UAASjP,MAAOK,GAAQ0O,yCJyChB,SAAClL,EAAIqD,mBAAAA,IAAAA,EAAiBnD,GAC5CF,EAAGjB,IAAkB,EACrBiB,EAAGhB,GAAwB,CACzBqE,eAAAA,GAEKrD,0BK3CM,SAA8BgB,EAAOf,UAC3C,SAAuBoL,OACtB7O,EAAQ8O,UACZ,kBACExD,EACmB,mBAAV9G,EAAuBA,EAAMqK,GAAerK,EACnDf,IAEJ,IAEIsL,EAAmBtO,SAAOT,EAAMG,cACED,WAAS,kBAAMF,EAAMG,aAAtDkH,OAAc2H,cACrBpO,YAAU,kBACDZ,EAAMoB,UAAU,eACf6N,EAAYjP,EAAMG,WACpB4O,EAAiBlO,UAAYoO,IAC/BF,EAAiBlO,QAAUoO,EAC3BD,EAAgBC,OAGnB,CAACjP,IACG,CAACqH,EAAcrH,EAAMyB,iCCnBjB,SAA4B+C,EAAOf,OAC1C5E,EAAeC,wBAoBd,CACL8P,yBAnBkBF,IAAAA,SAAUG,IAAAA,YACtB7O,EAAQ8O,UACZ,kBACExD,EACmB,mBAAV9G,EAAuBA,EAAMqK,GAAerK,EACnDf,IAEJ,WAGAkL,gBAAC9P,EAAa+P,UAASjP,MAAOK,GAAQ0O,IAUxCvM,2BALOlC,aAAWpB,IAMlBwC,cAAezB,EAAqBf,GACpC6C,gBAAiBH,EAAuB1C,GACxC+C,iBAAkBD,EAAwB9C,wCRkGvC,iBACE,CACLoD,WAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAT,gBAAAA,EACAE,iBAAAA,EACAP,cAAAA,YExHiB,SAAAjB,UACf8O,UAAQ9O,GACI+O,cAAYC,cAAYhP,IAGjCA,YA4Ba,SAAAoD,UACpBA,EAAGf,KAAgB,EACZe,UAGW,SAACA,EAAI6L,UAActI,EAAasI,EAAbtI,CAAwBvD,cA0BxC,SAAAA,UACrBA,EAAGb,KAAiB,EACba,YAlBa,SAACA,EAAIzD,UACzByD,EAAGT,KAAgB,EACnBS,EAAGZ,GAA4B7C,EAC/ByD,EAAGV,IAAqB,GACjBU,cAGe,SAACkE,EAAMlE,EAAIC,UACjCD,EAAGR,KAAkB,EACrBQ,EAAGP,IAAwB,CACzByE,KAAAA,EACAjE,OAAAA,GAEKD,oDAhDoB,SAAAF,UAAaA,EAAOlB,gCALnB,SAAAkB,UAAaA,EAAOlB"}